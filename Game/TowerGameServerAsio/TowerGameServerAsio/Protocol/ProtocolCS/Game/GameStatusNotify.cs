// automatically generated by the FlatBuffers compiler, do not modify

namespace ProtocolCS.Game
{

using System;
using FlatBuffers;

public struct GameStatusNotify : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GameStatusNotify GetRootAsGameStatusNotify(ByteBuffer _bb) { return GetRootAsGameStatusNotify(_bb, new GameStatusNotify()); }
  public static GameStatusNotify GetRootAsGameStatusNotify(ByteBuffer _bb, GameStatusNotify obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GameStatusNotify __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ProtocolCS.E_GameStatus GameStauts { get { int o = __p.__offset(4); return o != 0 ? (ProtocolCS.E_GameStatus)__p.bb.GetInt(o + __p.bb_pos) : ProtocolCS.E_GameStatus.NONE; } }
  public long CurrentServerTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
  public float PlayTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<GameStatusNotify> CreateGameStatusNotify(FlatBufferBuilder builder,
      ProtocolCS.E_GameStatus gameStauts = ProtocolCS.E_GameStatus.NONE,
      long currentServerTime = 0,
      float playTime = 0.0f) {
    builder.StartObject(3);
    GameStatusNotify.AddCurrentServerTime(builder, currentServerTime);
    GameStatusNotify.AddPlayTime(builder, playTime);
    GameStatusNotify.AddGameStauts(builder, gameStauts);
    return GameStatusNotify.EndGameStatusNotify(builder);
  }

  public static void StartGameStatusNotify(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddGameStauts(FlatBufferBuilder builder, ProtocolCS.E_GameStatus gameStauts) { builder.AddInt(0, (int)gameStauts, 0); }
  public static void AddCurrentServerTime(FlatBufferBuilder builder, long currentServerTime) { builder.AddLong(1, currentServerTime, 0); }
  public static void AddPlayTime(FlatBufferBuilder builder, float playTime) { builder.AddFloat(2, playTime, 0.0f); }
  public static Offset<GameStatusNotify> EndGameStatusNotify(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GameStatusNotify>(o);
  }
};


}
